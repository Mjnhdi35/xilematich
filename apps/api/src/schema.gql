# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  id: ID!
  userId: User!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Address {
  address: String!
  id: ID!
  cinemaId: Cinema!
  cinema: Cinema!
  lat: Float
  lng: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Movie {
  id: ID!
  title: String!
  director: String!
  genre: Genre
  duration: Int!
  releaseDate: DateTime!
  posterUrl: String
  showtimes: [Showtime!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Enum for roles"""
enum Genre {
  ACTION
  ADVENTURE
  ANIMATION
  COMEDY
  CRIME
  DOCUMENTARY
  DRAMA
  FAMILY
  FANTASY
  FILM_NOIR
  HISTORY
  HORROR
  MUSIC
  MYSTERY
  ROMANCE
  SCI_FI
  SHORT
  SPORT
  THRILLER
  WAR
  WESTERN
}

type Showtime {
  id: ID!
  startTime: DateTime!
  status: ShowtimeStatus
  movieId: Movie!
  movie: Movie!
  screenId: Screen!
  screen: Screen!
  bookings: [Booking!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Enum for roles"""
enum ShowtimeStatus {
  POSTPONED
  CANCELLED
}

type Ticket {
  id: ID!
  userId: User!
  user: User!
  qrCode: String
  bookings: [Booking!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Booking {
  id: ID!
  userId: User!
  user: User!
  showtimeId: Showtime!
  showtime: Showtime!
  row: Int!
  column: Int!
  screenId: Screen!
  ticketId: Ticket!
  ticket: Ticket!
  seat: Seat!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Seat {
  row: Int!
  column: Int!
  screenId: Screen!
  screen: Screen!
  bookings: [Booking!]!
}

type Screen {
  id: ID!
  numberRoom: Int!
  price: Float!
  projectionType: ProjectionType!
  soundSystemType: SoundSystemType!
  cinemaId: Cinema
  saets: [Seat!]
  cinema: Cinema
  showtime: [Showtime!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""Enum for roles"""
enum ProjectionType {
  STANDARD
  IMAX
  DOLBY_CINEMA
  RPX
  SCREENX
  PLF
}

"""Enum for roles"""
enum SoundSystemType {
  MONO
  STEREO
  DOLBY_DIGITAL
  DOLBY_ATMOS
  DTS
  DTS_X
  SONY_SDDS
  AURO_3D
  IMAX_ENHANCED
}

type Cinema {
  name: String!
  id: ID!
  address: Address
  managers: [Manager!]
  screens: Screen
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Manager {
  id: ID!
  user: User!
  userId: User!
  cinemaId: Cinema
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  admin: Admin
  manager: Manager
  bookings: [Booking!]
  tickets: [Ticket!]
}

type LoginOutput {
  token: String!
  user: User!
}

type Query {
  users: [User!]!
  user(id: String!): User!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  registerWithCredentials(registerWithCredentials: RegisterWithCredentialsInput!): User!
  registerWithProvider(registerWithProvider: RegisterWithProviderInput!): User!
  login(login: Login!): LoginOutput!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
  deleteUser(id: String!): User!
}

input CreateUserInput {
  name: String
}

input RegisterWithCredentialsInput {
  name: String
  email: String!
  password: String!
}

input RegisterWithProviderInput {
  name: String
  type: AuthsProviderType!
}

enum AuthsProviderType {
  GOOGLE
  CREDENTIALS
}

input Login {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
}